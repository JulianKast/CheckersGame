package check;

import java.awt.*;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentListener;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.*;

import javax.imageio.ImageIO;
import javax.swing.*;

public class GUI implements ActionListener{

	private JFrame MainFrame;
	
	private JPanel PanelLeft, PanelRight, GameBoard;
	protected static JButton[][] boardPositions;
	private Boolean[][] MoveCheck;
	static ImageIcon blueP;
	ImageIcon blackSqr;
	static Boolean PlayerTurn = true; // true player one white, false player two blue
	static ImageIcon whiteP;
	protected static int check = 0;
	static Boolean[][] isBlueP;
	static Boolean[][] isWhiteP;
	static int checkX = 0;
	static int checkY = 0;
	public GUI(){
		createGUI();
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		GUI checkers = new GUI();
	}
	
	
	private void createGUI(){

		MainFrame = new JFrame("Want to play a game?");
		MainFrame.setSize(600,600);
	
		MainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		MainFrame.setVisible(true);
		MainFrame.setLayout(new GridLayout(8,8,1,1));
		
	    MoveCheck = new Boolean[8][8];	
	    isWhiteP = new Boolean[8][8];
	    isBlueP = new Boolean[8][8];
	    
		boardPositions = new JButton[8][8];

		
		
			blueP = new ImageIcon(getClass().getResource("bluePice.jpg"));
			whiteP = new ImageIcon(getClass().getResource("whitePice.jpg"));
		
		
		for(int i = 0; i< 8; i++){
			for(int j = 0; j<8; j++){
				boardPositions[i][j] = new JButton();
				boardPositions[i][j].addActionListener(this);
				MainFrame.add(boardPositions[i][j]);
				MoveCheck[i][j] = false;
				isWhiteP[i][j] = false;
				isBlueP[i][j] = false;
			}
		}
	
		
		for (int x = 0; x<8; x++){
			for (int y = 0; y < 8; y++){
				if(x == 0 || x== 2 || x == 4 || x == 6){
					if(y==0|| y == 2|| y == 4|| y ==6){
					boardPositions[x][y].setBackground(Color.RED);
					
					
						}
					else{
						boardPositions[x][y].setBackground(Color.BLACK);
					}
					}
				if(x == 1 || x== 3 || x == 5 || x == 7){
					if(y==0|| y == 2|| y == 4|| y ==6){
					boardPositions[x][y].setBackground(Color.BLACK);
					
						}
					else{
						boardPositions[x][y].setBackground(Color.RED);
					}
					}
				
				
				}
			}
		StartingPositons();
		}

	public void StartingPositons(){
		
		
		boardPositions[0][1].setIcon(blueP);
		isBlueP[0][1] = true;
		boardPositions[0][3].setIcon(blueP);
		isBlueP[0][3] = true;
		boardPositions[0][5].setIcon(blueP);
		isBlueP[0][5] = true;
		boardPositions[0][7].setIcon(blueP);
		isBlueP[0][7] = true;
		boardPositions[1][0].setIcon(blueP);
		isBlueP[1][0] = true;
		boardPositions[1][2].setIcon(blueP);
		isBlueP[1][2] = true;
		boardPositions[1][4].setIcon(blueP);
		isBlueP[1][4] = true;
		boardPositions[1][6].setIcon(blueP);
		isBlueP[1][6] = true;
		boardPositions[2][1].setIcon(blueP);
		isBlueP[2][1] = true;
		boardPositions[2][3].setIcon(blueP);
		isBlueP[2][3] = true;
		boardPositions[2][5].setIcon(blueP);
		isBlueP[2][5] = true;
		boardPositions[2][7].setIcon(blueP);
		isBlueP[2][7] = true;
		
		boardPositions[5][0].setIcon(whiteP);
		isWhiteP[5][0] = true;
		boardPositions[5][2].setIcon(whiteP);
		isWhiteP[5][2] = true;
		boardPositions[5][4].setIcon(whiteP);
		isWhiteP[5][4] = true;
		boardPositions[5][6].setIcon(whiteP);
		isWhiteP[5][6] = true;
		boardPositions[6][1].setIcon(whiteP);
		isWhiteP[6][1] = true;
		boardPositions[6][3].setIcon(whiteP);
		isWhiteP[6][3] = true;
		boardPositions[6][5].setIcon(whiteP);
		isWhiteP[6][5] = true;
		boardPositions[6][7].setIcon(whiteP);
		isWhiteP[6][7] = true;
		boardPositions[7][0].setIcon(whiteP);
		isWhiteP[7][0] = true;
		boardPositions[7][2].setIcon(whiteP);
		isWhiteP[7][2] = true;
	    boardPositions[7][4].setIcon(whiteP);
	    isWhiteP[7][4]= true;
		boardPositions[7][6].setIcon(whiteP);
		isWhiteP[7][6] = true;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		System.out.println(e.getSource());
		if (PlayerTurn){
			Player1.move(e.getSource());
		}
		else {
			Player2.move(e.getSource());
		}
		
		
		}
		
		
	}
	
		
		

		

